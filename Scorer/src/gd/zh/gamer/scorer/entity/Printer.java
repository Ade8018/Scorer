package gd.zh.gamer.scorer.entity;

import gd.zh.gamer.scorer.db.DaoSession;
import gd.zh.gamer.scorer.db.PrinterDao;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "PRINTER".
 */
public class Printer {

    private Long id;
    /** Not-null value. */
    private String sn;
    /** Not-null value. */
    private String nickname;
    private long time;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PrinterDao myDao;

    private List<Printer> printerList;

    public Printer() {
    }

    public Printer(Long id) {
        this.id = id;
    }

    public Printer(Long id, String sn, String nickname, long time) {
        this.id = id;
        this.sn = sn;
        this.nickname = nickname;
        this.time = time;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPrinterDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getSn() {
        return sn;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSn(String sn) {
        this.sn = sn;
    }

    /** Not-null value. */
    public String getNickname() {
        return nickname;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNickname(String nickname) {
        this.nickname = nickname;
    }

    public long getTime() {
        return time;
    }

    public void setTime(long time) {
        this.time = time;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Printer> getPrinterList() {
        if (printerList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PrinterDao targetDao = daoSession.getPrinterDao();
            List<Printer> printerListNew = targetDao._queryPrinter_PrinterList(id);
            synchronized (this) {
                if(printerList == null) {
                    printerList = printerListNew;
                }
            }
        }
        return printerList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPrinterList() {
        printerList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
