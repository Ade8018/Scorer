package gd.zh.gamer.scorer.db;

import gd.zh.gamer.scorer.entity.Record;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "RECORD".
 */
public class RecordDao extends AbstractDao<Record, Long> {

	public static final String TABLENAME = "RECORD";

	/**
	 * Properties of entity Record.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id",
				true, "_id");
		public final static Property Score = new Property(1, long.class,
				"score", false, "SCORE");
		public final static Property Print_time = new Property(2, long.class,
				"print_time", false, "PRINT_TIME");
		public final static Property Exc_time = new Property(3, long.class,
				"exc_time", false, "EXC_TIME");
		public final static Property Pin = new Property(4, String.class, "pin",
				false, "PIN");
		public final static Property Printer_id = new Property(5, long.class,
				"printer_id", false, "PRINTER_ID");
	};

	public RecordDao(DaoConfig config) {
		super(config);
	}

	public RecordDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "\"RECORD\" (" + //
				"\"_id\" INTEGER PRIMARY KEY ," + // 0: id
				"\"SCORE\" INTEGER NOT NULL ," + // 1: score
				"\"PRINT_TIME\" INTEGER NOT NULL ," + // 2: print_time
				"\"EXC_TIME\" INTEGER NOT NULL ," + // 3: exc_time
				"\"PIN\" TEXT NOT NULL ," + // 4: pin
				"\"PRINTER_ID\" INTEGER NOT NULL );"); // 5: printer_id
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "\"RECORD\"";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, Record entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}
		stmt.bindLong(2, entity.getScore());
		stmt.bindLong(3, entity.getPrint_time());
		stmt.bindLong(4, entity.getExc_time());
		stmt.bindString(5, entity.getPin());
		stmt.bindLong(6, entity.getPrinter_id());
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public Record readEntity(Cursor cursor, int offset) {
		Record entity = new Record( //
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.getLong(offset + 1), // score
				cursor.getLong(offset + 2), // print_time
				cursor.getLong(offset + 3), // exc_time
				cursor.getString(offset + 4), // pin
				cursor.getLong(offset + 5) // printer_id
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, Record entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setScore(cursor.getLong(offset + 1));
		entity.setPrint_time(cursor.getLong(offset + 2));
		entity.setExc_time(cursor.getLong(offset + 3));
		entity.setPin(cursor.getString(offset + 4));
		entity.setPrinter_id(cursor.getLong(offset + 5));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(Record entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(Record entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

}
